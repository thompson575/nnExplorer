// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_GD
List rcpp_GD(NumericMatrix X, NumericMatrix Y, List design, double eta, int etaDrop, int penalty, double lambdaBias, double lambdaWeight, int nEpoch, double epsDeriv, int trace);
RcppExport SEXP _nnExplorer_rcpp_GD(SEXP XSEXP, SEXP YSEXP, SEXP designSEXP, SEXP etaSEXP, SEXP etaDropSEXP, SEXP penaltySEXP, SEXP lambdaBiasSEXP, SEXP lambdaWeightSEXP, SEXP nEpochSEXP, SEXP epsDerivSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type etaDrop(etaDropSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBias(lambdaBiasSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaWeight(lambdaWeightSEXP);
    Rcpp::traits::input_parameter< int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GD(X, Y, design, eta, etaDrop, penalty, lambdaBias, lambdaWeight, nEpoch, epsDeriv, trace));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_GDV
List rcpp_GDV(NumericMatrix X, NumericMatrix Y, List design, NumericMatrix XV, NumericMatrix YV, double eta, int etaDrop, int penalty, double lambdaBias, double lambdaWeight, int nEpoch, double epsDeriv, int maxvrise, int validGap, int trace);
RcppExport SEXP _nnExplorer_rcpp_GDV(SEXP XSEXP, SEXP YSEXP, SEXP designSEXP, SEXP XVSEXP, SEXP YVSEXP, SEXP etaSEXP, SEXP etaDropSEXP, SEXP penaltySEXP, SEXP lambdaBiasSEXP, SEXP lambdaWeightSEXP, SEXP nEpochSEXP, SEXP epsDerivSEXP, SEXP maxvriseSEXP, SEXP validGapSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type XV(XVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type YV(YVSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type etaDrop(etaDropSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBias(lambdaBiasSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaWeight(lambdaWeightSEXP);
    Rcpp::traits::input_parameter< int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< int >::type maxvrise(maxvriseSEXP);
    Rcpp::traits::input_parameter< int >::type validGap(validGapSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_GDV(X, Y, design, XV, YV, eta, etaDrop, penalty, lambdaBias, lambdaWeight, nEpoch, epsDeriv, maxvrise, validGap, trace));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_SGD
List rcpp_SGD(NumericMatrix X, NumericMatrix Y, List design, double eta, int etaDrop, int penalty, double lambdaBias, double lambdaWeight, int batch, int nIter, double momentum, double rmsprop, double beta, int warmup, int nEpoch, double epsDeriv, int trace);
RcppExport SEXP _nnExplorer_rcpp_SGD(SEXP XSEXP, SEXP YSEXP, SEXP designSEXP, SEXP etaSEXP, SEXP etaDropSEXP, SEXP penaltySEXP, SEXP lambdaBiasSEXP, SEXP lambdaWeightSEXP, SEXP batchSEXP, SEXP nIterSEXP, SEXP momentumSEXP, SEXP rmspropSEXP, SEXP betaSEXP, SEXP warmupSEXP, SEXP nEpochSEXP, SEXP epsDerivSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type etaDrop(etaDropSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBias(lambdaBiasSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaWeight(lambdaWeightSEXP);
    Rcpp::traits::input_parameter< int >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type rmsprop(rmspropSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_SGD(X, Y, design, eta, etaDrop, penalty, lambdaBias, lambdaWeight, batch, nIter, momentum, rmsprop, beta, warmup, nEpoch, epsDeriv, trace));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_SGDV
List rcpp_SGDV(NumericMatrix X, NumericMatrix Y, List design, NumericMatrix XV, NumericMatrix YV, double eta, int etaDrop, int penalty, double lambdaBias, double lambdaWeight, int batch, int nIter, double momentum, double rmsprop, double beta, int warmup, int nEpoch, double epsDeriv, int validGap, int trace);
RcppExport SEXP _nnExplorer_rcpp_SGDV(SEXP XSEXP, SEXP YSEXP, SEXP designSEXP, SEXP XVSEXP, SEXP YVSEXP, SEXP etaSEXP, SEXP etaDropSEXP, SEXP penaltySEXP, SEXP lambdaBiasSEXP, SEXP lambdaWeightSEXP, SEXP batchSEXP, SEXP nIterSEXP, SEXP momentumSEXP, SEXP rmspropSEXP, SEXP betaSEXP, SEXP warmupSEXP, SEXP nEpochSEXP, SEXP epsDerivSEXP, SEXP validGapSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type XV(XVSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type YV(YVSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type etaDrop(etaDropSEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambdaBias(lambdaBiasSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaWeight(lambdaWeightSEXP);
    Rcpp::traits::input_parameter< int >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type rmsprop(rmspropSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< int >::type nEpoch(nEpochSEXP);
    Rcpp::traits::input_parameter< double >::type epsDeriv(epsDerivSEXP);
    Rcpp::traits::input_parameter< int >::type validGap(validGapSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_SGDV(X, Y, design, XV, YV, eta, etaDrop, penalty, lambdaBias, lambdaWeight, batch, nIter, momentum, rmsprop, beta, warmup, nEpoch, epsDeriv, validGap, trace));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_backpropagation
List rcpp_backpropagation(NumericVector y, NumericVector v, NumericVector bias, NumericVector weight, IntegerVector from, IntegerVector to, IntegerVector nPtr, IntegerVector wPtr, IntegerVector actFun, int lossFun);
RcppExport SEXP _nnExplorer_rcpp_backpropagation(SEXP ySEXP, SEXP vSEXP, SEXP biasSEXP, SEXP weightSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP nPtrSEXP, SEXP wPtrSEXP, SEXP actFunSEXP, SEXP lossFunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nPtr(nPtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wPtr(wPtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type actFun(actFunSEXP);
    Rcpp::traits::input_parameter< int >::type lossFun(lossFunSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_backpropagation(y, v, bias, weight, from, to, nPtr, wPtr, actFun, lossFun));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_forward_pass
NumericVector rcpp_forward_pass(NumericVector v, NumericVector bias, NumericVector weight, IntegerVector from, IntegerVector to, IntegerVector nPtr, IntegerVector wPtr, IntegerVector actFun);
RcppExport SEXP _nnExplorer_rcpp_forward_pass(SEXP vSEXP, SEXP biasSEXP, SEXP weightSEXP, SEXP fromSEXP, SEXP toSEXP, SEXP nPtrSEXP, SEXP wPtrSEXP, SEXP actFunSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nPtr(nPtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wPtr(wPtrSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type actFun(actFunSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_forward_pass(v, bias, weight, from, to, nPtr, wPtr, actFun));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _nnExplorer_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_predict
NumericMatrix rcpp_predict(NumericMatrix X, List design);
RcppExport SEXP _nnExplorer_rcpp_predict(SEXP XSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_predict(X, design));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_values
NumericMatrix rcpp_values(NumericMatrix X, List design);
RcppExport SEXP _nnExplorer_rcpp_values(SEXP XSEXP, SEXP designSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type design(designSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_values(X, design));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nnExplorer_rcpp_GD", (DL_FUNC) &_nnExplorer_rcpp_GD, 11},
    {"_nnExplorer_rcpp_GDV", (DL_FUNC) &_nnExplorer_rcpp_GDV, 15},
    {"_nnExplorer_rcpp_SGD", (DL_FUNC) &_nnExplorer_rcpp_SGD, 17},
    {"_nnExplorer_rcpp_SGDV", (DL_FUNC) &_nnExplorer_rcpp_SGDV, 20},
    {"_nnExplorer_rcpp_backpropagation", (DL_FUNC) &_nnExplorer_rcpp_backpropagation, 10},
    {"_nnExplorer_rcpp_forward_pass", (DL_FUNC) &_nnExplorer_rcpp_forward_pass, 8},
    {"_nnExplorer_rcpp_hello_world", (DL_FUNC) &_nnExplorer_rcpp_hello_world, 0},
    {"_nnExplorer_rcpp_predict", (DL_FUNC) &_nnExplorer_rcpp_predict, 2},
    {"_nnExplorer_rcpp_values", (DL_FUNC) &_nnExplorer_rcpp_values, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_nnExplorer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
